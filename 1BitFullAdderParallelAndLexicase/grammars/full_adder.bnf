<statement>                 ::= <blockingstatementsum> <blockingstatementco>
<blockingstatementsum>    ::= assign sum = <rhs>;
<blockingstatementco>     ::= assign co = <rhs>;
<rhs>                       ::= <binaryop> | <logicalnot>
<binaryop>                 ::= <bitwiseand> | <bitwiseor> | <bitwisexor>
<bitwiseand>               ::= ((<argument>)&(<argument>))
<bitwiseor>                ::= ((<argument>)|(<argument>))
<bitwisexor>               ::= ((<argument>)^(<argument>))
<logicalnot>               ::= !(<argument>)
<argument>                  ::= <invar> | <binaryopout> | <logicalnotout>
<argumentout>              ::= <invar> | <binaryopin> | <logicalnotin>
<binaryopout>             ::= <bitwiseandout> | <bitwiseorout> | <bitwisexorout>
<bitwiseandout>           ::= (<argumentout>&<argumentout>)
<bitwiseorout>            ::= (<argumentout>|<argumentout>)
<bitwisexorout>           ::= (<argumentout>^<argumentout>)
<binaryopin>              ::= <bitwiseandin> | <bitwiseorin> | <bitwisexorin>
<bitwiseandin>            ::= (<invar>&<invar>)
<bitwiseorin>             ::= (<invar>|<invar>)
<bitwisexorin>            ::= (<invar>^<invar>)
<logicalnotout>           ::= !(<argumentout>)
<logicalnotin>            ::= !(<invar>)
<invar>                     ::= a | b | ci
<nextline>                  ::= \n
